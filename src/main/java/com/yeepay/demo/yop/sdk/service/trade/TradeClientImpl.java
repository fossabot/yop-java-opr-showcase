/*
 * 标准交易
 * <p>名称（中文）：新交易下单接口<br />名称（英文，xx.war）：opr-hessian.war<br />简介：合单支付下单与标准收款内部下单接口合并<br />wiki文档地址：http://wiki.yeepay.com/pages/viewpage.action?pageId=122095805(4.新api分组相关接口规划)<br />预计项目上线时间：2020年6月9日<br />归属/拟申请的sp编码（可选）：opr<br />期望api分组编码、名称（可选）：trade(标准交易)<br />涉及的接口：申请下单、订单查询、申请退款、退款查询</p>
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.yeepay.demo.yop.sdk.service.trade;

import com.yeepay.demo.yop.sdk.service.trade.request.*;
import com.yeepay.demo.yop.sdk.service.trade.response.*;
import com.yeepay.yop.sdk.client.*;
import com.yeepay.yop.sdk.exception.YopClientException;
import com.yeepay.yop.sdk.http.HttpResponseAnalyzerSupport;
import com.yeepay.yop.sdk.http.HttpResponseHandler;
import com.yeepay.yop.sdk.http.handler.DefaultHttpResponseHandler;
import com.yeepay.yop.sdk.model.transform.RequestMarshaller;

@javax.annotation.Generated(value = "com.yeepay.g3.core.yop.codegen.generator2.java.YopJavaClientCodegen", date = "2020-11-05T11:17:04.800+08:00[Asia/Shanghai]")
public class TradeClientImpl implements TradeClient {

    private final ClientHandler clientHandler;

    TradeClientImpl(ClientParams clientParams) {
        this.clientHandler = new ClientHandlerImpl(new ClientHandlerParams().withClientParams(clientParams));
    }

    @Override
    public OrderResponse order(OrderRequest request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        RequestMarshaller<OrderRequest> requestMarshaller = OrderRequestMarshaller.getInstance();
        HttpResponseHandler<OrderResponse> responseHandler =
                new DefaultHttpResponseHandler<OrderResponse>(OrderResponse.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<OrderRequest, OrderResponse>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public OrderCloseResponse orderClose(OrderCloseRequest request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        RequestMarshaller<OrderCloseRequest> requestMarshaller = OrderCloseRequestMarshaller.getInstance();
        HttpResponseHandler<OrderCloseResponse> responseHandler =
                new DefaultHttpResponseHandler<OrderCloseResponse>(OrderCloseResponse.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<OrderCloseRequest, OrderCloseResponse>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public OrderCombineQueryResponse orderCombineQuery(OrderCombineQueryRequest request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        if (request.getParentMerchantNo() == null) {
            throw new YopClientException("request.parentMerchantNo is required.");
        }
        if (request.getOrderId() == null) {
            throw new YopClientException("request.orderId is required.");
        }
        RequestMarshaller<OrderCombineQueryRequest> requestMarshaller = OrderCombineQueryRequestMarshaller.getInstance();
        HttpResponseHandler<OrderCombineQueryResponse> responseHandler =
                new DefaultHttpResponseHandler<OrderCombineQueryResponse>(OrderCombineQueryResponse.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<OrderCombineQueryRequest, OrderCombineQueryResponse>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public OrderQueryResponse orderQuery(OrderQueryRequest request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        if (request.getParentMerchantNo() == null) {
            throw new YopClientException("request.parentMerchantNo is required.");
        }
        if (request.getMerchantNo() == null) {
            throw new YopClientException("request.merchantNo is required.");
        }
        if (request.getOrderId() == null) {
            throw new YopClientException("request.orderId is required.");
        }
        RequestMarshaller<OrderQueryRequest> requestMarshaller = OrderQueryRequestMarshaller.getInstance();
        HttpResponseHandler<OrderQueryResponse> responseHandler =
                new DefaultHttpResponseHandler<OrderQueryResponse>(OrderQueryResponse.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<OrderQueryRequest, OrderQueryResponse>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public RefundResponse refund(RefundRequest request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        RequestMarshaller<RefundRequest> requestMarshaller = RefundRequestMarshaller.getInstance();
        HttpResponseHandler<RefundResponse> responseHandler =
                new DefaultHttpResponseHandler<RefundResponse>(RefundResponse.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<RefundRequest, RefundResponse>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public RefundQueryResponse refundQuery(RefundQueryRequest request) throws YopClientException {
        if (request == null) {
            throw new YopClientException("request is required.");
        }
        if (request.getParentMerchantNo() == null) {
            throw new YopClientException("request.parentMerchantNo is required.");
        }
        if (request.getMerchantNo() == null) {
            throw new YopClientException("request.merchantNo is required.");
        }
        if (request.getOrderId() == null) {
            throw new YopClientException("request.orderId is required.");
        }
        if (request.getRefundRequestId() == null) {
            throw new YopClientException("request.refundRequestId is required.");
        }
        RequestMarshaller<RefundQueryRequest> requestMarshaller = RefundQueryRequestMarshaller.getInstance();
        HttpResponseHandler<RefundQueryResponse> responseHandler =
                new DefaultHttpResponseHandler<RefundQueryResponse>(RefundQueryResponse.class,
                        HttpResponseAnalyzerSupport.getAnalyzerChain());

        return clientHandler.execute(new ClientExecutionParams<RefundQueryRequest, RefundQueryResponse>()
                .withInput(request)
                .withRequestMarshaller(requestMarshaller)
                .withResponseHandler(responseHandler));
    }

    @Override
    public void shutdown() {
        clientHandler.shutdown();
    }

}
